image:
  repository: osrf/ros
  tag: humble-desktop
  pullPolicy: IfNotPresent
imagePullSecrets: []   # p.ej.: [{name: myregistry}]

resources:
  talker:
    requests: { cpu: 100m, memory: 128Mi }
    limits:   { cpu: 300m, memory: 256Mi }
  listener:
    requests: { cpu: 100m, memory: 128Mi }
    limits:   { cpu: 300m, memory: 256Mi }
  loadGenerator:
    requests: { cpu: 50m, memory: 64Mi }
    limits:   { cpu: 200m, memory: 128Mi }

commonEnv:
  ROS_DOMAIN_ID: "42"
  RMW_IMPLEMENTATION: "rmw_fastrtps_cpp"
  ROS_LOCALHOST_ONLY: "0"

talker:
  enabled: true
  nodeSelector: { role: edge }   # <-- Raspberry (arm64)
  affinity: {}
  tolerations: []
  extraEnv: []
  # Opcionalmente puedes exponer Service del talker; por defecto, off:
  service:
    enabled: false
    type: ClusterIP
    ports: []   # añade si lo necesitas

listener:
  enabled: true
  nodeSelector: { role: cloud }  # <-- kb2 (amd64)
  affinity: {}
  tolerations: []
  extraEnv: []
  readinessProbe:
    enabled: false    # Actívala cuando tengas un healthcheck real
  livenessProbe:
    enabled: true     # Liveness exec básica para ROS2
  service:
    enabled: true
    type: ClusterIP
    ports:
      - name: dds-discovery
        port: 7400
        targetPort: 7400
        protocol: UDP
      - name: dds-user
        port: 7401
        targetPort: 7401
        protocol: UDP
  loadGenerator:
    enabled: true
    messageRate: 10
    topicName: "load_topic"

config:
  loadSimScript: |
    #!/usr/bin/env python3
    import os, time, rclpy
    from rclpy.node import Node
    from std_msgs.msg import String

    class LoadPublisher(Node):
        def __init__(self):
            super().__init__('load_publisher')
            topic = os.environ.get('TOPIC_NAME','load_topic')
            hz = float(os.environ.get('MESSAGE_RATE','10'))
            self.pub = self.create_publisher(String, topic, 10)
            self.timer = self.create_timer(1.0/max(hz,0.1), self.tick)
            self.i = 0

        def tick(self):
            msg = String()
            msg.data = f"load msg {self.i}"
            self.pub.publish(msg)
            self.i += 1

    rclpy.init()
    node = LoadPublisher()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    node.destroy_node()
    rclpy.shutdown()
