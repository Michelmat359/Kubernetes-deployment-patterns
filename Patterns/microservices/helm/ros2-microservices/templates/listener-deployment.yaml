{{- if .Values.listener.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ros2-microservices.fullname" . }}-listener
  labels:
    {{- include "ros2-microservices.labels" . | nindent 4 }}
    microservice: listener
    tier: subscriber
spec:
  replicas: {{ .Values.listener.replicaCount }}
  selector:
    matchLabels:
      app: listener
      microservice: listener
  template:
    metadata:
      labels:
        app: listener
        microservice: listener
        {{- include "ros2-microservices.labels" . | nindent 8 }}
    spec:
      {{- if .Values.listener.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.listener.nodeSelector | nindent 8 }}
      {{- end }}
      hostNetwork: {{ .Values.networking.hostNetwork }}
      dnsPolicy: {{ .Values.networking.dnsPolicy }}
      containers:
        # Contenedor principal: Listener
        - name: listener
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: ROS_DOMAIN_ID
              value: "{{ .Values.ros.domainId }}"
            - name: RMW_IMPLEMENTATION
              value: "{{ .Values.ros.rmwImplementation }}"
            - name: ROS_LOCALHOST_ONLY
              value: "0"
            - name: FASTRTPS_DEFAULT_PROFILES_FILE
              value: "/tmp/fastdds.xml"
            - name: NODE_NAME
              value: "listener_microservice"
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          command:
            - /bin/bash
            - -c
            - |
              cat > /tmp/fastdds.xml <<EOF
              <?xml version="1.0" encoding="UTF-8" ?>
              <profiles xmlns="http://www.eprosima.com/XMLSchemas/fastRTPS_Profiles">
                  <participant profile_name="participant_profile" is_default_profile="true">
                      <rtps>
                          <builtin>
                              <discovery_config>
                                  <discoveryProtocol>SIMPLE</discoveryProtocol>
                                  <leaseDuration>
                                      <sec>20</sec>
                                  </leaseDuration>
                              </discovery_config>
                          </builtin>
                      </rtps>
                  </participant>
              </profiles>
              EOF
              
              source /opt/ros/{{ .Chart.AppVersion }}/setup.bash
              echo "==================================="
              echo "Listener Microservice Starting..."
              echo "Pod IP: \$POD_IP"
              echo "Domain ID: {{ .Values.ros.domainId }}"
              echo "==================================="
              
              ros2 run {{ .Values.listener.component.package }} {{ .Values.listener.component.executable }}
          ports:
            - name: ros-dds
              containerPort: 7400
              protocol: UDP
            - name: ros-discovery
              containerPort: 7401
              protocol: UDP
          resources:
            {{- toYaml .Values.listener.resources | nindent 12 }}
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - "ros2 node list | grep -q listener || exit 1"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

        {{- if .Values.loadGenerator.enabled }}
        # Contenedor sidecar: Load Generator
        - name: load-generator
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: ROS_DOMAIN_ID
              value: "{{ .Values.ros.domainId }}"
            - name: RMW_IMPLEMENTATION
              value: "{{ .Values.ros.rmwImplementation }}"
            - name: ROS_LOCALHOST_ONLY
              value: "0"
            - name: MESSAGE_RATE
              value: "{{ .Values.loadGenerator.messageRate }}"
            - name: TOPIC_NAME
              value: "{{ .Values.loadGenerator.topic }}"
          command:
            - /bin/bash
            - -c
            - |
              source /opt/ros/{{ .Chart.AppVersion }}/setup.bash
              sleep 5  # Esperar a que listener est√© listo
              echo "Starting Load Generator..."
              python3 /scripts/{{ .Values.loadGenerator.scriptPath }}
          volumeMounts:
            - name: load-sim
              mountPath: /scripts
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 200m
              memory: 128Mi
        {{- end }}

      volumes:
        {{- if .Values.loadGenerator.enabled }}
        - name: load-sim
          configMap:
            name: {{ include "ros2-microservices.fullname" . }}-load-sim
            defaultMode: 0755
        {{- end }}
      restartPolicy: Always
{{- end }}