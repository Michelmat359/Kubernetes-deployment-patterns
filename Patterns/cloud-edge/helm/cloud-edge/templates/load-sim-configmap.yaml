
{{- if .Values.loadGenerator.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "cloud-edge.fullname" . }}-load-sim
  labels:
    {{- include "cloud-edge.labels" . | nindent 4 }}
data:
  {{ .Values.loadGenerator.scriptPath }}: |
    #!/usr/bin/env python3
    """
    Load Generator for Edge Processing
    Simula carga de trabajo publicando mensajes a un rate configurable
    """
    import os
    import sys
    import time
    import rclpy
    from rclpy.node import Node
    from std_msgs.msg import String
    
    class LoadGenerator(Node):
        def __init__(self):
            super().__init__('load_generator_edge')
            
            # Configuraci√≥n desde variables de entorno
            self.rate_hz = float(os.getenv('MESSAGE_RATE', '10'))
            self.topic_name = os.getenv('TOPIC_NAME', 'edge_load')
            
            # Crear publicador
            self.publisher = self.create_publisher(
                String, 
                self.topic_name, 
                10
            )
            
            # Crear timer
            self.timer = self.create_timer(
                1.0 / self.rate_hz, 
                self.publish_message
            )
            
            self.counter = 0
            self.get_logger().info(
                f'Load Generator iniciado - Publicando a {self.rate_hz} Hz en topic "{self.topic_name}"'
            )
        
        def publish_message(self):
            msg = String()
            timestamp = self.get_clock().now().to_msg()
            msg.data = f'Edge load message #{self.counter} - Time: {timestamp.sec}.{timestamp.nanosec}'
            
            self.publisher.publish(msg)
            self.counter += 1
            
            # Log cada 100 mensajes para no saturar
            if self.counter % 100 == 0:
                self.get_logger().info(
                    f'Published {self.counter} messages to "{self.topic_name}"'
                )
    
    def main(args=None):
        rclpy.init(args=args)
        
        try:
            node = LoadGenerator()
            rclpy.spin(node)
        except KeyboardInterrupt:
            print('\nShutting down load generator...')
        except Exception as e:
            print(f'Error: {e}', file=sys.stderr)
        finally:
            if rclpy.ok():
                rclpy.shutdown()
    
    if __name__ == '__main__':
        main()
{{- end }}