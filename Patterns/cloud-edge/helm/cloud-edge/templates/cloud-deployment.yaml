{{- if .Values.cloud.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "cloud-edge.fullname" . }}-fleet-manager
  labels:
    {{- include "cloud-edge.labels" . | nindent 4 }}
    component: fleet-manager
    tier: cloud
spec:
  replicas: {{ .Values.cloud.replicas }}
  selector:
    matchLabels:
      app: fleet-manager
      component: cloud
  template:
    metadata:
      labels:
        app: fleet-manager
        component: cloud
        {{- include "cloud-edge.labels" . | nindent 8 }}
    spec:
      {{- if .Values.cloud.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.cloud.nodeSelector | nindent 8 }}
      {{- end }}
      containers:
        - name: fleet-manager
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            # Variables críticas ROS 2
            - name: ROS_DOMAIN_ID
              value: "{{ .Values.ros.domainId }}"
            - name: RMW_IMPLEMENTATION
              value: "{{ .Values.ros.rmwImplementation }}"
            - name: ROS_LOCALHOST_ONLY
              value: "0"  # Permitir comunicación entre nodos
            - name: FASTRTPS_DEFAULT_PROFILES_FILE
              value: "/tmp/fastdds.xml"
            # Identificación del componente
            - name: NODE_NAME
              value: "fleet_manager_cloud"
            - name: COMPONENT_TYPE
              value: "cloud"
          command:
            - /bin/bash
            - -c
            - |
              # Configurar FastDDS para comunicación multi-nodo
              cat > /tmp/fastdds.xml <<EOF
              <?xml version="1.0" encoding="UTF-8" ?>
              <profiles xmlns="http://www.eprosima.com/XMLSchemas/fastRTPS_Profiles">
                  <participant profile_name="participant_profile" is_default_profile="true">
                      <rtps>
                          <builtin>
                              <discovery_config>
                                  <discoveryProtocol>SIMPLE</discoveryProtocol>
                                  <leaseDuration>
                                      <sec>20</sec>
                                  </leaseDuration>
                              </discovery_config>
                          </builtin>
                      </rtps>
                  </participant>
              </profiles>
              EOF
              
              # Iniciar ROS 2
              source /opt/ros/{{ .Chart.AppVersion }}/setup.bash
              echo "Starting Fleet Manager on Cloud Node..."
              ros2 run {{ .Values.cloud.component.rosPackage }} {{ .Values.cloud.component.rosExecutable }}
          ports:
            - name: ros-dds
              containerPort: 7400
              protocol: UDP
            - name: ros-discovery
              containerPort: 7401
              protocol: UDP
          resources:
            {{- toYaml .Values.cloud.resources | nindent 12 }}
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - "ros2 node list | grep -q fleet_manager || exit 1"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - "ros2 node list | grep -q fleet_manager || exit 1"
            initialDelaySeconds: 15
            periodSeconds: 5
      restartPolicy: Always
{{- end }}