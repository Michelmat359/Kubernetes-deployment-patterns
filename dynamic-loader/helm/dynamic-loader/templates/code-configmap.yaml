apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "dynamic-loader.fullname" . }}-code
  labels:
    {{- include "dynamic-loader.labels" . | nindent 4 }}
data:
  server.py: |
    import os, sys
    import importlib.util
    from fastapi import FastAPI, UploadFile, File, HTTPException
    from fastapi.responses import JSONResponse
    import uvicorn

    app = FastAPI()
    MODULES_DIR = "/modules"

    os.makedirs(MODULES_DIR, exist_ok=True)

    @app.get("/")
    async def root():
        return {"status": "running"}

    @app.post("/modules/")
    async def upload_module(name: str, file: UploadFile = File(...)):
        dest = os.path.join(MODULES_DIR, name + ".py")
        content = await file.read()
        with open(dest, "wb") as f:
            f.write(content)
        spec = importlib.util.spec_from_file_location(name, dest)
        module = importlib.util.module_from_spec(spec)
        try:
            spec.loader.exec_module(module)
            sys.modules[name] = module
        except Exception as e:
            raise HTTPException(status_code=400, detail=str(e))
        return {"status": "loaded", "module": name}

    @app.get("/modules/")
    async def list_modules():
        files = [f[:-3] for f in os.listdir(MODULES_DIR) if f.endswith(".py")]
        return {"modules": files}

    @app.delete("/modules/{name}")
    async def delete_module(name: str):
        if name not in sys.modules:
            raise HTTPException(status_code=404, detail="Module not loaded")
        sys.modules.pop(name)
        path = os.path.join(MODULES_DIR, name + ".py")
        if os.path.exists(path):
            os.remove(path)
        return {"status": "unloaded", "module": name}

    if __name__ == "__main__":
        uvicorn.run("server:app", host="0.0.0.0", port=int(os.getenv("PORT", {{ .Values.api.port }})))