apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "cloud-edge.fullname" . }}-talker-code
  labels:
    {{- include "cloud-edge.labels" . | nindent 4 }}
data:
  talker.py: |
    import os, time, rclpy
    from rclpy.node import Node
    from std_msgs.msg import String
    from prometheus_client import start_http_server, Gauge

    LATENCY = Gauge('ros2_latency_seconds', 'End-to-end latency in seconds')

    class Talker(Node):
        def __init__(self):
            super().__init__('bench_talker')
            self.pub = self.create_publisher(String, 'chatter', 10)
            rate = float(os.getenv('MESSAGE_RATE', '10'))
            start_http_server(int(os.getenv('METRICS_PORT', '9090')))
            self.create_timer(1.0 / rate, self.tick)

        def tick(self):
            ts = time.time()
            msg = String()
            msg.data = str(ts)
            self.pub.publish(msg)

    def main():
        rclpy.init()
        node = Talker()
        rclpy.spin(node)
        node.destroy_node()
        rclpy.shutdown()

    if __name__ == '__main__':
        main()