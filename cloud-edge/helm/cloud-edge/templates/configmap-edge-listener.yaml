apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "cloud-edge.fullname" . }}-listener-code
  labels:
    {{- include "cloud-edge.labels" . | nindent 4 }}
data:
  listener.py: |
    import os, time, rclpy
    from rclpy.node import Node
    from std_msgs.msg import String
    from prometheus_client import start_http_server, Gauge

    LATENCY = Gauge('ros2_latency_seconds', 'End-to-end latency in seconds')

    class Listener(Node):
        def __init__(self):
            super().__init__('bench_listener')
            start_http_server(int(os.getenv('METRICS_PORT', '9090')))
            self.sub = self.create_subscription(String, 'chatter', self.cb, 10)

        def cb(self, msg):
            recv_ts = time.time()
            send_ts = float(msg.data)
            LATENCY.observe(recv_ts - send_ts)

    def main():
        rclpy.init()
        node = Listener()
        rclpy.spin(node)
        node.destroy_node()
        rclpy.shutdown()

    if __name__ == '__main__':
        main()